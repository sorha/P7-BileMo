security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Used to get a token by sending username and password
        login:
            pattern: ^/api/login_check
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # Used to login by sending a valid token
        api:
            anonymous: ~
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        # Used to login to admin panel using login form
        admin:
            anonymous: ~
            pattern: ^/admin
            form_login:
                check_path: admin_login
                login_path: admin_login
                default_target_path: easyadmin
                use_referer: true
            logout:
                path: admin_logout
                target: admin_login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin_login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }

    # To be sure admin have at least normal user right
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER